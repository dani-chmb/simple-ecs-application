# Step 1: Create an ECR repository to store your images
# Step 2: Create an ECS task definition, an ECS Cluster, and an ECS Service
# Step 3: Store your ECS task definition as a JSON file in your repository
# Step 4: Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`
name: Deploy to Amazon ECS
on: workflow_dispatch

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: github-actions-repo
  ECS_SERVICE: test-two-service
  #ECS_SERVICE: github-actions-service
  ECS_CLUSTER: Github-Actions-Cluster
  ECS_TASK_DEFINITION: .aws/fargate-task-def.json
  CONTAINER_NAME: "app"
  ENV: "dev"

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: development

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      # - name: Fill in the new image ID in the Amazon ECS task definition
      #   id: task-def
      #   uses: aws-actions/amazon-ecs-render-task-definition@v1
      #   with:
      #     task-definition: .aws/task-definition.json
      #     container-name: "app"
      #     image: ${{ steps.build-image.outputs.image }}
      #     environment-variables: |
      #       TOKEN=123

      - name: Deploy ECS task definition to ECS Service
        uses: dani-chmb/amazon-ecs-deploy-task-definition@a98576654b00073d1ae9a007e262697008bb5a30
        with:
          # task-definition: ${{ steps.task-def.outputs.task-definition }}
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
          enable-ecs-managed-tags: true
    
